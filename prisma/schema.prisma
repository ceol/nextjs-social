generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  userName      String?   @unique
  accounts      Account[]
  sessions      Session[]

  posts Post[]

  reposts Post[] @relation("RepostedPosts")
  likes   Post[] @relation("LikedPosts")

  messageGroups MessageGroup[] @relation("MessageGroups")
  messages      Message[]      @relation("Messages")

  following  User[] @relation("Follows")
  followingCount Int @default(0)

  followedBy User[] @relation("Follows")
  followedByCount Int @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(cuid())
  content    String
  datePosted DateTime @default(now())

  repostedBy  User[] @relation("RepostedPosts")
  repostCount Int    @default(0)

  likedBy   User[] @relation("LikedPosts")
  likeCount Int    @default(0)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  parentId   String?
  parent     Post?   @relation("PostReplies", fields: [parentId], references: [id])
  replies    Post[]  @relation("PostReplies")
  replyCount Int     @default(0)
}

model MessageGroup {
  id       String    @id @default(cuid())
  authors  User[]    @relation("MessageGroups")
  messages Message[] @relation("GroupMessages")
}

model Message {
  id       String   @id @default(cuid())
  content  String
  dateSent DateTime @default(now())

  groupId String
  group   MessageGroup @relation("GroupMessages", fields: [groupId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation("Messages", fields: [authorId], references: [id], onDelete: Cascade)
}
